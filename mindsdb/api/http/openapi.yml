openapi: 3.0.0
info:
  title: MindsDB API
  description: >-
    OpenAPI Specification for MindsDB's REST API. Each API Endpoint corresponds
    to a specific SQL Statement e.g POST /model => CREATE MODEL
  version: 0.0.1
  contact:
    email: admin@mindsdb.com
  license:
    name: GNU General Public License v3.0
    url: 'https://github.com/mindsdb/mindsdb/blob/staging/LICENSE'
servers:
  - url: 'https://cloud.mindsdb.com/v1/api/'
    description: MindsDB Production cloud server
  - url: 'http://alpha.mindsdb.com/v1/api'
    description: MindsDB Alpha cloud server
  - url: 'http://127.0.0.1/v1/api'
    description: MindsDB local deployments
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
paths:
  /databases:
    get:
      security:
        - ApiKeyAuth: []
      summary: Returns a list of database names.
      description: This endpoint retrieves all databases created by the user.
      responses:
        '200':
          description: A JSON array of database names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Invalid API key error message
          content:
            application/json:
              schema:
                type: object
                items:
                  type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                items:
                  type: string
    post:
      security:
        - ApiKeyAuth: []
      summary: Creates a new database connection.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                engine:
                  type: string
                user:
                  type: string
                password:
                  type: string
                host:
                  type: string
                port:
                  type: string
                database:
                  type: string
      responses:
        '201':
          description: Database was succesfully created
          content:
            application/json:
              schema:
                type: object
                items:
                  type: string
        '401':
          description: Invalid API key error message
          content:
            application/json:
              schema:
                type: object
                items:
                  type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                items:
                  type: string
    put:
      security:
        - ApiKeyAuth: []
      summary: Updates an existing database connection.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: string
                password:
                  type: string
                host:
                  type: string
                port:
                  type: string
                database:
                  type: string
      responses:
        '201':
          description: Database was succesfully updated
          content:
            application/json:
              schema:
                type: object
                items:
                  type: string
        '401':
          description: Invalid API key error message
          content:
            application/json:
              schema:
                type: object
                items:
                  type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                items:
                  type: string
  'databases/{databaseName}':
    get:
      security:
        - ApiKeyAuth: []
      summary: Gets info about existing database.
      description: This endpoint retrieves a specific database info.
      parameters:
        - name: databaseName
          in: path
          description: databaseName to select
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A JSON object with database informations
          content:
            application/json:
              schema:
                type: object
                items:
                  type: string
        '401':
          description: Invalid API key error message
          content:
            application/json:
              schema:
                type: object
                items:
                  type: string
        '404':
          description: Database not found
          content:
            application/json:
              schema:
                type: object
                items:
                  type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                items:
                  type: string
    delete:
      security:
        - ApiKeyAuth: []
      summary: Deletes an existing database.
      description: This endpoint retrieves all databases created by the user.
      parameters:
        - name: databaseName
          in: path
          description: databaseName to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A JSON array of database names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Invalid API key error message
          content:
            application/json:
              schema:
                type: object
                items:
                  type: string
        '404':
          description: Database not found
          content:
            application/json:
              schema:
                type: object
                items:
                  type: string
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                items:
                  type: string
