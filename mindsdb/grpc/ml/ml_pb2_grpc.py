# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import common_pb2 as common__pb2
import ml_pb2 as ml__pb2


class MLServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTables = channel.unary_unary(
                '/MLService/GetTables',
                request_serializer=ml__pb2.HandlerContext.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )
        self.GetColumns = channel.unary_unary(
                '/MLService/GetColumns',
                request_serializer=ml__pb2.ColumnsContext.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )
        self.NativeQuery = channel.unary_unary(
                '/MLService/NativeQuery',
                request_serializer=ml__pb2.NativeQueryContext.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )
        self.BinaryQuery = channel.unary_unary(
                '/MLService/BinaryQuery',
                request_serializer=ml__pb2.BinaryQueryContext.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )
        self.Predict = channel.unary_unary(
                '/MLService/Predict',
                request_serializer=ml__pb2.PredictContext.SerializeToString,
                response_deserializer=common__pb2.Response.FromString,
                )
        self.Learn = channel.unary_unary(
                '/MLService/Learn',
                request_serializer=ml__pb2.LearnContext.SerializeToString,
                response_deserializer=common__pb2.StatusResponse.FromString,
                )
        self.Update = channel.unary_unary(
                '/MLService/Update',
                request_serializer=ml__pb2.UpdateContext.SerializeToString,
                response_deserializer=common__pb2.StatusResponse.FromString,
                )


class MLServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetTables(self, request, context):
        """A simple RPC.

        Performs 'get_tables' request and returns the result

        wrapped into Response object
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetColumns(self, request, context):
        """A simple RPC.

        Performs 'get_columns' request and returns the result

        wrapped into Response object
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NativeQuery(self, request, context):
        """A simple RPC.

        Execute native query (string) and returns the result

        wrapped into Response object
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BinaryQuery(self, request, context):
        """A simple RPC.

        Execute query (object) and returns the result

        wrapped into Response object
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Predict(self, request, context):
        """A simple RPC.

        Performs 'predict' request and returns the result

        wrapped into Response object
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Learn(self, request, context):
        """A simple RPC.

        Performs 'learn' request and returns the result

        wrapped into Response object
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """A simple RPC.

        Performs 'update' request and returns the result

        wrapped into Response object
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MLServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTables': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTables,
                    request_deserializer=ml__pb2.HandlerContext.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
            'GetColumns': grpc.unary_unary_rpc_method_handler(
                    servicer.GetColumns,
                    request_deserializer=ml__pb2.ColumnsContext.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
            'NativeQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.NativeQuery,
                    request_deserializer=ml__pb2.NativeQueryContext.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
            'BinaryQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.BinaryQuery,
                    request_deserializer=ml__pb2.BinaryQueryContext.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
            'Predict': grpc.unary_unary_rpc_method_handler(
                    servicer.Predict,
                    request_deserializer=ml__pb2.PredictContext.FromString,
                    response_serializer=common__pb2.Response.SerializeToString,
            ),
            'Learn': grpc.unary_unary_rpc_method_handler(
                    servicer.Learn,
                    request_deserializer=ml__pb2.LearnContext.FromString,
                    response_serializer=common__pb2.StatusResponse.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=ml__pb2.UpdateContext.FromString,
                    response_serializer=common__pb2.StatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MLService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MLService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetTables(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MLService/GetTables',
            ml__pb2.HandlerContext.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetColumns(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MLService/GetColumns',
            ml__pb2.ColumnsContext.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NativeQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MLService/NativeQuery',
            ml__pb2.NativeQueryContext.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BinaryQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MLService/BinaryQuery',
            ml__pb2.BinaryQueryContext.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Predict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MLService/Predict',
            ml__pb2.PredictContext.SerializeToString,
            common__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Learn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MLService/Learn',
            ml__pb2.LearnContext.SerializeToString,
            common__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MLService/Update',
            ml__pb2.UpdateContext.SerializeToString,
            common__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
